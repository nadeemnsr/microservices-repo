package com.discovery.app.user.service;

import java.util.ArrayList;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.discovery.app.user.data.entity.UserEntity;
import com.discovery.app.user.repository.UsersRepositoty;
import com.discovery.app.user.ui.model.UserDto;

@Service
public class UserServiceImpl implements UserService {

	UsersRepositoty usersRepositoty;
	BCryptPasswordEncoder bCryptPasswordEncoder;
	UserService userDetailsService;

	@Autowired
	public UserServiceImpl(UsersRepositoty usersRepositoty, BCryptPasswordEncoder bCryptPasswordEncoder,
			UserService userDetailsService) {
		this.usersRepositoty = usersRepositoty;
		this.bCryptPasswordEncoder = bCryptPasswordEncoder;
		this.userDetailsService = userDetailsService;
	}

	@Override
	public UserDto createUser(UserDto userDetails) {

		userDetails.setUserId(UUID.randomUUID().toString());
		userDetails.setEncryptedPass(bCryptPasswordEncoder.encode(UUID.randomUUID().toString()));
		ModelMapper model = new ModelMapper();
		model.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		UserEntity userEntity = model.map(userDetails, UserEntity.class);
		if (usersRepositoty.count() < 1)
			usersRepositoty.save(userEntity);

		UserDto dto = model.map(userEntity, UserDto.class);
		return dto;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserEntity entity = usersRepositoty.findByEmail(username);

		if (entity == null)
			throw new UsernameNotFoundException(username);

		return new User(entity.getEmail(), entity.getEncryptedPass(), true, true, true, true, new ArrayList<>());
	}

	@Override
	public UserDto getUserDetailByEmail(String username) {
		UserEntity entity = usersRepositoty.findByEmail(username);

		if (entity == null)
			throw new UsernameNotFoundException(username);

		return new ModelMapper().map(entity, UserDto.class);
	}

	@Autowired
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	protected void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {

		auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
	}
}
